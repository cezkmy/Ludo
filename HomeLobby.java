

package ludolegends;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

public class HomeLobby extends JFrame {

Â  Â  private boolean soundEffectsEnabled = true;
Â  Â  private boolean backgroundMusicEnabled = true;

Â  Â  // Constructor for HomeLobby frame
Â  Â  public HomeLobby() {
Â  Â  Â  Â  setTitle("Game Lobby");
Â  Â  Â  Â  setSize(800, 600);
Â  Â  Â  Â  setLocationRelativeTo(null);
Â  Â  Â  Â  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
Â  Â  Â  Â  setLayout(new BorderLayout());

Â  Â  Â  Â  // Set background color for the frame
Â  Â  Â  Â  getContentPane().setBackground(new Color(242, 242, 242));

Â  Â  Â  Â  // Background Panel with a solid color
Â  Â  Â  Â  JPanel backgroundPanel = new JPanel() {
Â  Â  Â  Â  Â  Â  @Override
Â  Â  Â  Â  Â  Â  protected void paintComponent(Graphics g) {
Â  Â  Â  Â  Â  Â  Â  Â  super.paintComponent(g); // Call parent method to ensure correct painting behavior

Â  Â  Â  Â  Â  Â  Â  Â  // Load and draw the background image
Â  Â  Â  Â  Â  Â  Â  Â  ImageIcon backgroundImage = new ImageIcon(getClass().getResource("/images/bgi.png"));
Â  Â  Â  Â  Â  Â  Â  Â  g.drawImage(backgroundImage.getImage(), 0, 0, getWidth(), getHeight(), this);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  backgroundPanel.setLayout(new BoxLayout(backgroundPanel, BoxLayout.Y_AXIS));
Â  Â  Â  Â  backgroundPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
Â  Â  Â  Â  backgroundPanel.setBackground(new Color(242, 242, 242)); // Same light gray background

Â  Â  Â  Â  // Sound control panel in the upper right
Â  Â  Â  Â  JPanel soundControlPanel = new JPanel();
Â  Â  Â  Â  soundControlPanel.setLayout(new BoxLayout(soundControlPanel, BoxLayout.Y_AXIS));
Â  Â  Â  Â  soundControlPanel.setBackground(new Color(242, 242, 242));
Â  Â  Â  Â  soundControlPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 10));

Â  Â  Â  Â  // Create circular sound control buttons
Â  Â  Â  Â  JButton soundEffectsButton = createCircleButton("ðŸ”Š", new Color(66, 169, 255), e -> {
Â  Â  Â  Â  Â  Â  soundEffectsEnabled = !soundEffectsEnabled;
Â  Â  Â  Â  Â  Â  ((JButton)e.getSource()).setText(soundEffectsEnabled ? "ðŸ”Š" : "ðŸ”ˆ");
Â  Â  Â  Â  });

Â  Â  Â  Â  JButton backgroundMusicButton = createCircleButton("â™ª", new Color(79, 157, 88), e -> {
Â  Â  Â  Â  Â  Â  backgroundMusicEnabled = !backgroundMusicEnabled;
Â  Â  Â  Â  Â  Â  ((JButton)e.getSource()).setText(backgroundMusicEnabled ? "â™ª" : "â™«");
Â  Â  Â  Â  });

Â  Â  Â  Â  soundControlPanel.add(soundEffectsButton);
Â  Â  Â  Â  soundControlPanel.add(Box.createVerticalStrut(10)); // Add spacing between buttons
Â  Â  Â  Â  soundControlPanel.add(backgroundMusicButton);

Â  Â  Â  Â  // Title label with alternating colors
Â  Â  Â  Â  JLabel titleLabel = new JLabel("<html><div style='text-align:center; font-family: \"PressStart2P-Regular.ttf\", monospace;'>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:50px; color:#4285F4;'>Ludo Legends</span><br/>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66B4FF;'>T</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66BB6A;'>h</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#DE0A26;'>e </span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#F4B400;'>B</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66B4FF;'>a</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66BB6A;'>t</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#DE0A26;'>t</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#F4B400;'>l</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66B4FF;'>e </span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66BB6A;'>o</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#DE0A26;'>f </span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#F4B400;'>C</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66B4FF;'>o</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#DE0A26;'>l</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#F4B400;'>o</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66B4FF;'>r</span>"
Â  Â  Â  Â  Â  Â  + "<span style='font-size:36px; color:#66BB6A;'>s</span>"
Â  Â  Â  Â  Â  Â  + "</div></html>", JLabel.CENTER);

Â  Â  Â  Â  titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
Â  Â  Â  Â  titleLabel.setBorder(BorderFactory.createEmptyBorder(20, 0, 40, 0)); // Add space below title
Â  Â  Â  Â  backgroundPanel.add(titleLabel);

Â  Â  Â  Â  // Add buttons
Â  Â  Â  Â  backgroundPanel.add(createStyledButton("Start / Play", new Color(66, 169, 255), e -> {
Â  Â  Â  Â  Â  Â  JOptionPane.showMessageDialog(null, "Game Starting!");
Â  Â  Â  Â  }));

Â  Â  Â  Â  backgroundPanel.add(createStyledButton("Game Instructions", new Color(79, 157, 88), e -> {
Â  Â  Â  Â  Â  Â  String instructions = "1. Roll the dice to move your token.\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  + "2. Reach the target and be the first to win!\n"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  + "3. Click on your token to move.";
Â  Â  Â  Â  Â  Â  JOptionPane.showMessageDialog(null, instructions, "Instructions", JOptionPane.INFORMATION_MESSAGE);
Â  Â  Â  Â  }));

Â  Â  Â  Â  backgroundPanel.add(createStyledButton("Exit", new Color(194, 53, 29), e -> {
Â  Â  Â  Â  Â  Â  System.exit(0);
Â  Â  Â  Â  }));

Â  Â  Â  Â  // Add the background panel to the frame
Â  Â  Â  Â  add(backgroundPanel, BorderLayout.CENTER);
Â  Â  Â  Â  add(soundControlPanel, BorderLayout.EAST);
Â  Â  }

Â  Â  // Method to create a circular button for sound controls
Â  Â  private JButton createCircleButton(String text, Color color, ActionListener action) {
Â  Â  Â  Â  JButton button = new JButton(text) {
Â  Â  Â  Â  Â  Â  @Override
Â  Â  Â  Â  Â  Â  protected void paintComponent(Graphics g) {
Â  Â  Â  Â  Â  Â  Â  Â  Graphics2D g2d = (Graphics2D) g;
Â  Â  Â  Â  Â  Â  Â  Â  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
Â  Â  Â  Â  Â  Â  Â  Â  if (getModel().isPressed()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color.darker());
Â  Â  Â  Â  Â  Â  Â  Â  } else if (getModel().isRollover()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color.brighter());
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  g2d.fillOval(0, 0, getWidth() - 1, getHeight() - 1);
Â  Â  Â  Â  Â  Â  Â  Â  super.paintComponent(g);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  button.setFont(new Font("Segoe UI", Font.BOLD, 16));
Â  Â  Â  Â  button.setForeground(Color.WHITE);
Â  Â  Â  Â  button.setFocusPainted(false);
Â  Â  Â  Â  button.setPreferredSize(new Dimension(40, 40));
Â  Â  Â  Â  button.setMaximumSize(new Dimension(40, 40));
Â  Â  Â  Â  button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Â  Â  Â  Â  button.setContentAreaFilled(false);
Â  Â  Â  Â  button.setBorderPainted(false);
Â  Â  Â  Â  button.addActionListener(action);

Â  Â  Â  Â  return button;
Â  Â  }

Â  Â  // Method to create a styled button with rounded corners and dynamic color changes
Â  Â  private JButton createStyledButton(String text, Color color, ActionListener action) {
Â  Â  Â  Â  JButton button = new JButton(text) {
Â  Â  Â  Â  Â  Â  @Override
Â  Â  Â  Â  Â  Â  protected void paintComponent(Graphics g) {
Â  Â  Â  Â  Â  Â  Â  Â  Graphics2D g2d = (Graphics2D) g;
Â  Â  Â  Â  Â  Â  Â  Â  if (getModel().isPressed()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color.darker());
Â  Â  Â  Â  Â  Â  Â  Â  } else if (getModel().isRollover()) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color.brighter());
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  g2d.setColor(color);
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 30, 30);
Â  Â  Â  Â  Â  Â  Â  Â  super.paintComponent(g);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  };

Â  Â  Â  Â  button.setFont(new Font("Segoe UI", Font.BOLD, 20));
Â  Â  Â  Â  button.setForeground(Color.WHITE);
Â  Â  Â  Â  button.setFocusPainted(false);
Â  Â  Â  Â  button.setPreferredSize(new Dimension(250, 50));
Â  Â  Â  Â  button.setMaximumSize(new Dimension(250, 50));
Â  Â  Â  Â  button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
Â  Â  Â  Â  button.setAlignmentX(Component.CENTER_ALIGNMENT);
Â  Â  Â  Â  button.setOpaque(true);
Â  Â  Â  Â  button.setBackground(color);
Â  Â  Â  Â  button.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
Â  Â  Â  Â 
Â  Â  Â  Â  button.addActionListener(action);

Â  Â  Â  Â  return button;
Â  Â  }

Â  Â  public static void main(String[] args) {
Â  Â  Â  Â  SwingUtilities.invokeLater(() -> new HomeLobby().setVisible(true));
Â  Â  }
}


